/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface HabitCreateSchema
 */
export interface HabitCreateSchema {
    /**
     * 
     * @type {string}
     * @memberof HabitCreateSchema
     */
    'description': string;
    /**
     * 
     * @type {Periodicity}
     * @memberof HabitCreateSchema
     */
    'periodicity': Periodicity;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Periodicity = {
    Daily: 'DAILY',
    Weekly: 'WEEKLY',
    Monthly: 'MONTHLY',
    Yearly: 'YEARLY'
} as const;

export type Periodicity = typeof Periodicity[keyof typeof Periodicity];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Catch All
         * @param {string} fullPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catchAllFullPathGet: async (fullPath: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fullPath' is not null or undefined
            assertParamExists('catchAllFullPathGet', 'fullPath', fullPath)
            const localVarPath = `/{full_path}`
                .replace(`{${"full_path"}}`, encodeURIComponent(String(fullPath)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Complete Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeHabitTask: async (habitId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'habitId' is not null or undefined
            assertParamExists('completeHabitTask', 'habitId', habitId)
            const localVarPath = `/api/habits/{habit_id}/complete`
                .replace(`{${"habit_id"}}`, encodeURIComponent(String(habitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Habit
         * @param {HabitCreateSchema} habitCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHabit: async (habitCreateSchema: HabitCreateSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'habitCreateSchema' is not null or undefined
            assertParamExists('createHabit', 'habitCreateSchema', habitCreateSchema)
            const localVarPath = `/api/habits/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(habitCreateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHabit: async (habitId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'habitId' is not null or undefined
            assertParamExists('deleteHabit', 'habitId', habitId)
            const localVarPath = `/api/habits/{habit_id}`
                .replace(`{${"habit_id"}}`, encodeURIComponent(String(habitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Habits
         * @param {string | null} [periodicity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHabits: async (periodicity?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/habits/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (periodicity !== undefined) {
                localVarQueryParameter['periodicity'] = periodicity;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHabitDetails: async (habitId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'habitId' is not null or undefined
            assertParamExists('getHabitDetails', 'habitId', habitId)
            const localVarPath = `/api/habits/{habit_id}`
                .replace(`{${"habit_id"}}`, encodeURIComponent(String(habitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Longest Streak
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLongestStreakForAllHabits: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/habits/analytics/longest-streak`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Longest Streak For Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLongestStreakForHabit: async (habitId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'habitId' is not null or undefined
            assertParamExists('getLongestStreakForHabit', 'habitId', habitId)
            const localVarPath = `/api/habits/{habit_id}/analytics/streak`
                .replace(`{${"habit_id"}}`, encodeURIComponent(String(habitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Struggled Habits Last Month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStruggledHabitsLastMonth: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/habits/analytics/struggled-last-month`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Catch All
         * @param {string} fullPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catchAllFullPathGet(fullPath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catchAllFullPathGet(fullPath, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.catchAllFullPathGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Complete Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeHabitTask(habitId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeHabitTask(habitId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.completeHabitTask']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create Habit
         * @param {HabitCreateSchema} habitCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHabit(habitCreateSchema: HabitCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HabitCreateSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHabit(habitCreateSchema, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.createHabit']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHabit(habitId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHabit(habitId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.deleteHabit']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary List Habits
         * @param {string | null} [periodicity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHabits(periodicity?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHabits(periodicity, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getAllHabits']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHabitDetails(habitId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHabitDetails(habitId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getHabitDetails']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Longest Streak
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLongestStreakForAllHabits(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLongestStreakForAllHabits(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getLongestStreakForAllHabits']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Longest Streak For Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLongestStreakForHabit(habitId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLongestStreakForHabit(habitId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getLongestStreakForHabit']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Struggled Habits Last Month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStruggledHabitsLastMonth(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStruggledHabitsLastMonth(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getStruggledHabitsLastMonth']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Catch All
         * @param {string} fullPath 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catchAllFullPathGet(fullPath: string, options?: any): AxiosPromise<string> {
            return localVarFp.catchAllFullPathGet(fullPath, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Complete Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeHabitTask(habitId: number, options?: any): AxiosPromise<void> {
            return localVarFp.completeHabitTask(habitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Habit
         * @param {HabitCreateSchema} habitCreateSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHabit(habitCreateSchema: HabitCreateSchema, options?: any): AxiosPromise<HabitCreateSchema> {
            return localVarFp.createHabit(habitCreateSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHabit(habitId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteHabit(habitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Habits
         * @param {string | null} [periodicity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHabits(periodicity?: string | null, options?: any): AxiosPromise<void> {
            return localVarFp.getAllHabits(periodicity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHabitDetails(habitId: number, options?: any): AxiosPromise<void> {
            return localVarFp.getHabitDetails(habitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Longest Streak
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLongestStreakForAllHabits(options?: any): AxiosPromise<void> {
            return localVarFp.getLongestStreakForAllHabits(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Longest Streak For Habit
         * @param {number} habitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLongestStreakForHabit(habitId: number, options?: any): AxiosPromise<void> {
            return localVarFp.getLongestStreakForHabit(habitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Struggled Habits Last Month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStruggledHabitsLastMonth(options?: any): AxiosPromise<void> {
            return localVarFp.getStruggledHabitsLastMonth(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Catch All
     * @param {string} fullPath 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public catchAllFullPathGet(fullPath: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).catchAllFullPathGet(fullPath, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Complete Habit
     * @param {number} habitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public completeHabitTask(habitId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).completeHabitTask(habitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Habit
     * @param {HabitCreateSchema} habitCreateSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createHabit(habitCreateSchema: HabitCreateSchema, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createHabit(habitCreateSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Habit
     * @param {number} habitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteHabit(habitId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteHabit(habitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Habits
     * @param {string | null} [periodicity] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllHabits(periodicity?: string | null, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllHabits(periodicity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Habit
     * @param {number} habitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHabitDetails(habitId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHabitDetails(habitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Longest Streak
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLongestStreakForAllHabits(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLongestStreakForAllHabits(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Longest Streak For Habit
     * @param {number} habitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLongestStreakForHabit(habitId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLongestStreakForHabit(habitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Struggled Habits Last Month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStruggledHabitsLastMonth(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStruggledHabitsLastMonth(options).then((request) => request(this.axios, this.basePath));
    }
}



